package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"net"
	"net/http"
	"net/textproto"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"
)

type Github struct {
	Login             string      `json:"login"`
	ID                int         `json:"id"`
	NodeID            string      `json:"node_id"`
	AvatarURL         string      `json:"avatar_url"`
	GravatarID        string      `json:"gravatar_id"`
	URL               string      `json:"url"`
	HTMLURL           string      `json:"html_url"`
	FollowersURL      string      `json:"followers_url"`
	FollowingURL      string      `json:"following_url"`
	GistsURL          string      `json:"gists_url"`
	StarredURL        string      `json:"starred_url"`
	SubscriptionsURL  string      `json:"subscriptions_url"`
	OrganizationsURL  string      `json:"organizations_url"`
	ReposURL          string      `json:"repos_url"`
	EventsURL         string      `json:"events_url"`
	ReceivedEventsURL string      `json:"received_events_url"`
	Type              string      `json:"type"`
	SiteAdmin         bool        `json:"site_admin"`
	Name              string      `json:"name"`
	Company           string      `json:"company"`
	Blog              string      `json:"blog"`
	Location          string      `json:"location"`
	Email             interface{} `json:"email"`
	Hireable          interface{} `json:"hireable"`
	Bio               string      `json:"bio"`
	TwitterUsername   string      `json:"twitter_username"`
	PublicRepos       int         `json:"public_repos"`
	PublicGists       int         `json:"public_gists"`
	Followers         int         `json:"followers"`
	Following         int         `json:"following"`
	CreatedAt         time.Time   `json:"created_at"`
	UpdatedAt         time.Time   `json:"updated_at"`
}

func connect() net.Conn {
	conn, err := net.Dial("tcp", "localhost:6667")
	if err != nil {
		panic(err)
	}
	return conn
}

func disconnect(conn net.Conn) {
	sendData(conn, "QUIT Bye")
	conn.Close()
}

func api(name string, target interface{}) error {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl 'https://api.github.com/users/j4g3' -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:85.0) Gecko/20100101 Firefox/85.0' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' -H 'Accept-Language: pt-BR' --compressed -H 'Connection: keep-alive' -H 'Cookie: _octo=GH1.1.1992424341.1611609598; logged_in=yes; dotcom_user=j4g3; tz=America%2FSao_Paulo' -H 'Upgrade-Insecure-Requests: 1' -H 'Cache-Control: max-age=0' -H 'TE: Trailers' -H 'If-Modified-Since: Wed, 24 Feb 2021 15:53:53 GMT' -H 'If-None-Match: W/"74f01071734c4eaf2f15264f72ae8b41ac67cc01a3f57650ec56eae0dac0f2a6"'

	req, err := http.NewRequest("GET", "https://api.github.com/users/"+name, nil)
	if err != nil {
		// handle err
	}

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()
	return json.NewDecoder(resp.Body).Decode(target)
}

func login(conn net.Conn) {
	sendData(conn, "USER github-bot-top 8 * :Someone")
	sendData(conn, "NICK github-bot-top")
	sendData(conn, "JOIN #chat-top")
	sendData(conn, "PRIVMSG #chat-top :Aoba bão ?")

}

func pong(conn net.Conn) {
	sendData(conn, "PONG")
}

func github(conn net.Conn, gitname string) {
	data := new(Github)
	api(gitname, &data)
	sendData(conn, "PRIVMSG #chat-top :Nome do github é "+data.Name)
}

func command(conn net.Conn, message string) {
	data := strings.Split(message, ":")
	var size int = len(data)
	var parser string = data[size-1]
	dataCommand := strings.Split(parser, " ")
	if dataCommand[0] == "!github" {
		var name string = dataCommand[len(dataCommand)-1]
		github(conn, name)
	}
}

func main() {

	conn := connect()

	c := make(chan os.Signal)
	signal.Notify(c, os.Interrupt, syscall.SIGTERM)
	go func() {
		<-c
		disconnect(conn)
	}()

	login(conn)

	tp := textproto.NewReader(bufio.NewReader(conn))

	for {
		status, err := tp.ReadLine()
		if err != nil {
			panic(err)
		}

		println(status)
		command(conn, status)

		if strings.HasPrefix(status, "PING") {
			pong(conn)
		}
	}
}

func sendData(conn net.Conn, message string) {
	fmt.Fprintf(conn, "%s\r\n", message)
}
